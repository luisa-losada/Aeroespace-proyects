# -*- coding: utf-8 -*-
"""Weather_Observation_Satellite_Simulator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qvK8J5SB-_q_ZHu8q3-eRt_YEA7jWzSz
"""

import random

import time

from abc import ABC, abstractmethod

!pip install matplotlib pandas numpy

"""#Abstract Subsystem Base Class"""

# Abstract base class
class Subsystem(ABC):
    pass

"""## PowerSystem"""

class PowerSystem(Subsystem):
    def __init__(self):
        self.battery_level = 100  # %
        self.solar_input = True  # True = sunlight; False = eclipse
    def operate(self):
        if self.solar_input:
            self.battery_level = min(100, self.battery_level + 5)
            print(f"[Power] Charging... Battery at {self.battery_level}%")
        else:
            self.battery_level -= 10
            print(f"[Power] Eclipse! Battery draining... Battery at {self.battery_level}%")
        if self.battery_level <= 20:
            print("[Power] WARNING: Battery critically low!")
    def toggle_solar_input(self):
        self.solar_input = not self.solar_input
        state = "Sunlight" if self.solar_input else "Eclipse"
        print(f"[Power] Solar condition changed: {state}")
    def force_solar_input(self):
        if not self.solar_input:
            print("[Power] Subsystem requested solar input. Forcing sunlight mode.")
            self.solar_input = True
    def consume_power(self, amount):
        self.battery_level = max(0, self.battery_level - amount)
        print(f"[Power] Consumed {amount}% power. Battery now at {self.battery_level}%")

"""##Attitude Control System"""

class AttitudeControlSystem(Subsystem):
    def __init__(self):
        self.attitude = "Stable"  # or "Disturbed"
        self.altitude_km = 500    # Current altitude in kilometers

    def simulate_disturbance(self):
        if random.random() < 0.2:
            self.attitude = "Disturbed"

    def adjust_attitude(self):
        if self.attitude == "Disturbed":
            print("[ACS] Adjusting attitude...")
            self.attitude = "Stable"
            print("[ACS] Attitude stabilized.")

    def operate(self):
        print(f"[ACS] Current attitude: {self.attitude}")
        if self.attitude != "Stable":
            print("[ACS] WARNING: Attitude disturbed!")
            self.adjust_attitude()
        else:
            print("[ACS] Attitude is stable.")

        # Altitude check
        self.altitude_km -= random.uniform(0.1, 0.5)  # Simulate drag
        print(f"[ACS] Current altitude: {self.altitude_km:.2f} km")
        if self.altitude_km < 480:
            print("[ACS] WARNING: Altitude too low! Consider orbit correction.")

"""## Payload system"""

class PayloadCamera(Subsystem):
    def __init__(self):
        self.temperature = 20# Celsius
        self.operational_range= (15, 35) # Min and max temperature
        self.power_required= 30# Minimum battery needed to operate
        self.power_consumption  =5 # Power consumed per operation
        self.failures=0
    def operate(self, battery_level, power_system):
        if battery_level < self.power_required +5:
            print("[Payload] Battery approaching threshold. Requesting solar charge.")
            power_system.force_solar_input( )
        if battery_level < self.power_required:
            print("[Payload] Power too low. Camera inactive.")
            self.failures +=1
            return
        self.temperature +=random.uniform(-0.5, 0.5)
        if self.temperature > self.operational_range[1]:
            print(f"[Payload] WARNING: Temperature too high ({self.temperature:.1f}°C). Activating cooling system.")
            self.temperature-= 2
            if self.temperature > self.operational_range[1]:
                print("[Payload] ERROR: Cooling system failed to reduce temperature adequately.")
                self.failures += 1
        elif self.temperature < self.operational_range[0]:
            print(f"[Payload] WARNING: Temperature too low ({self.temperature:.1f}°C). Activating heater.")
            self.temperature += 2
            if self.temperature < self.operational_range[0]:
                print("[Payload] ERROR: Heater failed to increase temperature adequately.")
                self.failures += 1
        power_system.consume_power(self.power_consumption)
        print(f"[Payload] Capturing data at {self.temperature:.1f}°C")
        if random.random() < 0.05:
            print("[Payload] ERROR: Camera malfunction detected!")
            self.failures += 1

"""## Communication system

"""

class CommSystem(Subsystem):
    def __init__(self):
        self.operational =True
        self.power_required =25
        self.power_consumption= 2
        self.transmission_failures=0
    def operate(self, battery_level, power_system):
        if not self.operational:
            print("[Comm] System offline due to fault.")
            self.transmission_failures += 1
            if random.random()< 0.3:
                self.operational = True
                print("[Comm] Communication system recovered.")
            return
        if battery_level < self.power_required + 5:
            print("[Comm] Battery approaching threshold. Requesting solar charge.")
            power_system.force_solar_input( )
        if battery_level < self.power_required:
            print("[Comm] Power too low. Communication offline.")
            self.transmission_failures +=1
            return
        power_system.consume_power(self.power_consumption)
        print("[Comm] Transmitting data to Earth..")

"""##Thermal control system"""

class ThermalControlSystem(Subsystem):
 def __init__(self):
  self.temperature=25
  self.safe_range= (0, 40)
  self.cooling_rate=2
  self.heating_rate=2
 def operate(self, power_system):
# Simulate environmental drift
        self.temperature+=random.uniform(-1.0, 1.0)
        if self.temperature > self.safe_range[1]:
            print(f"[Thermal] WARNING: Overheating at{self.temperature:.1f}°C. Activating radiators.")
            power_system.consume_power(3)
            self.temperature-=self.cooling_rate
        elif self.temperature < self.safe_range[0]:
            print(f"[Thermal] WARNING: Too cold at{self.temperature:.1f}°C. Activating heaters.")
            power_system.consume_power(3)
            self.temperature +=self.heating_rate
        print(f"[Thermal] Current satellite temperature:{self.temperature:.1f}°C")

"""## Navigation system"""

class NavigationSystem(Subsystem):
    def __init__(self):
        self.latitude = 0.0     # Degrees
        self.longitude = 0.0    # Degrees
        self.drift_threshold = 5.0  # Max allowed deviation in degrees
        self.power_consumption = 4

    def simulate_orbit_drift(self):
        # Simulate random drift in position
        self.latitude += random.uniform(-1.0, 1.0)
        self.longitude += random.uniform(-1.5, 1.5)

    def check_orbit(self):
        if abs(self.latitude) > self.drift_threshold or abs(self.longitude) > self.drift_threshold:
            print(f"[Nav] WARNING: Orbital drift detected at ({self.latitude:.2f}°, {self.longitude:.2f}°).")
            return True
        return False

    def correct_orbit(self, power_system):
        print("[Nav] Performing orbit correction maneuver.")
        power_system.consume_power(self.power_consumption)
        self.latitude = 0.0
        self.longitude = 0.0
        print("[Nav] Orbit correction complete. Position reset.")

    def operate(self, power_system):
        self.simulate_orbit_drift()
        print(f"[Nav] Current position: lat {self.latitude:.2f}°, lon {self.longitude:.2f}°")
        if self.check_orbit():
            self.correct_orbit(power_system)

"""## Event manager"""

class EventManager:
    def trigger_random_event(self, satellite):
        event = random.choice([
            "eclipse",
            "normal",
            "disturbance",
            "comm_failure",
            "sensor_blackout",
            "overheat",
            "micrometeoroid"
        ])
        print(f"[Event] Triggered event: {event}")
        if event == "eclipse":
            satellite.power_system.toggle_solar_input()
        elif event == "disturbance":
            satellite.attitude_system.simulate_disturbance()
        elif event == "comm_failure":
            print("[Event] High radiation! Communication subsystem temporarily disabled.")
            satellite.comm.operational = False
        elif event == "sensor_blackout":
            print("[Event] Optical blackout! Camera sensor not responding.")
            satellite.payload.failures += 1
        elif event == "overheat":
            print("[Event] Solar flare! Payload camera temperature increased suddenly.")
            satellite.payload.temperature += 5
        elif event == "micrometeoroid":
            damaged = random.choice(["power", "comm", "camera"])
            if damaged == "power":
                print("[Event] Micrometeoroid impact on solar panel! Reducing charging efficiency.")
                satellite.power_system.battery_level = max(0, satellite.power_system.battery_level - 5)
            elif damaged == "comm":
                print("[Event] Micrometeoroid damaged antenna. Communication disrupted.")
                satellite.comm.operational = False
            elif damaged == "camera":
                print("[Event] Camera lens scratched! Data quality reduced.")
                satellite.payload.failures += 1

"""## Main satellite simulator"""

class WeatherObservationSatelliteSimulator:
 def __init__(self):
  self.power_system = PowerSystem()
  self.attitude_system = AttitudeControlSystem()
  self.payload = PayloadCamera()
  self.comm = CommSystem()
  self.thermal = ThermalControlSystem()
  self.navigation = NavigationSystem()
  self.event_manager = EventManager()
 def run_cycle(self):
  print("\n Running satellite simulation cycle...")
  self.event_manager.trigger_random_event(self)
  self.power_system.operate()
  self.attitude_system.operate()
  self.thermal.operate(self.power_system)
  self.navigation.operate(self.power_system)
  battery = self.power_system.battery_level
  self.payload.operate(battery, self.power_system)
  self.comm.operate(battery, self.power_system)

"""## Example usage"""

if __name__ == "__main__":
    satellite = WeatherObservationSatelliteSimulator()
    for _ in range(5):
          satellite.run_cycle()

